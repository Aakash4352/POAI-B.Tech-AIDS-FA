PLAYER_X = 1
PLAYER_O = -1
EMPTY = 0

def evaluate(board):
    for row in board:
        if row[0] == row[1] == row[2] != EMPTY:
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != EMPTY:
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return board[0][2]
    return 0

def isMovesLeft(board):
    return any(EMPTY in row for row in board)

def minimax(board, isMax):
    score = evaluate(board)
    if score: return score
    if not isMovesLeft(board): return 0
    best = -float('inf') if isMax else float('inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X if isMax else PLAYER_O
                value = minimax(board, not isMax)
                best = max(best, value) if isMax else min(best, value)
                board[i][j] = EMPTY
    return best

def findBestMove(board):
    bestVal = -float('inf')
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                value = minimax(board, False)
                board[i][j] = EMPTY
                if value > bestVal:
                    bestVal = value
                    move = (i, j)
    return move

def printBoard(board):
    for row in board:
        print(" ".join("X" if x == PLAYER_X else "O" if x == PLAYER_O else "." for x in row))

board = [
    [PLAYER_X, PLAYER_O, PLAYER_X],
    [PLAYER_O, PLAYER_X, EMPTY],
    [EMPTY, PLAYER_O, PLAYER_X]
]

print("Current Board:")
printBoard(board)
move = findBestMove(board)
print(f"Best Move: {move}")
board[move[0]][move[1]] = PLAYER_X
print("Board after move:")
printBoard(board)
